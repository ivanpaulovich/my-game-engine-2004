{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue128;\red0\green0\blue0;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title brSprite.rtf}}

\deflang1033\pard\plain\f0\fs20 \cf0\i (*******************************************************)
\par (*                                                     *)
\par (*       Engine Paulovich DirectX                      *)
\par (*       Win32-DirectX API Unit                        *)
\par (*                                                     *)
\par (*       Copyright (c) 2003-2004, Ivan Paulovich       *)
\par (*                                                     *)
\par (*       iskatrek@hotmail.com  uin#89160524            *)
\par (*                                                     *)
\par (*       Unit: brSprite                                *)
\par (*                                                     *)
\par (*******************************************************)
\par 
\par \i0\cf1\b unit \b0 brSprite;
\par 
\par \b interface
\par 
\par uses
\par   \b0 Windows, SysUtils, Classes, brGraphics,
\par   D3DX8, \cf0\i \{$IFDEF DXG_COMPAT\}\i0\cf1 DirectXGraphics\cf0\i \{$ELSE\}\i0\cf1 Direct3D8\cf0\i \{$ENDIF\}\i0\cf1 ;
\par 
\par \b type
\par 
\par   \b0\cf0\i (* TSprite *)
\par 
\par   \i0\cf1 TSpriteEngine = \b class\b0 ;
\par 
\par   TSprite = \b class
\par   private
\par     \b0 FEngine: TSpriteEngine;
\par     FParent: TSprite;
\par     FList: TList;
\par     FDeaded: Boolean;
\par     FDrawList: TList;
\par     FCollisioned: Boolean;
\par     FMoved: Boolean;
\par     FVisible: Boolean;
\par     FX: Single;
\par     FY: Single;
\par     FZ: Integer;
\par     FWidth: Integer;
\par     FHeight: Integer;
\par     \b procedure \b0 Add(Sprite: TSprite);
\par     \b procedure \b0 Remove(Sprite: TSprite);
\par     \b procedure \b0 AddDrawList(Sprite: TSprite);
\par     \b procedure \b0 Collision2;
\par     \b procedure \b0 Draw;
\par     \b function \b0 GetClientRect: TRect;
\par     \b function \b0 GetCount: Integer;
\par     \b function \b0 GetItem(Index: Integer): TSprite;
\par     \b function \b0 GetWorldX: Single;
\par     \b function \b0 GetWorldY: Single;
\par     \b procedure \b0 SetZ(Value: Integer);
\par   \b protected
\par     procedure \b0 DoCollision(Sprite: TSprite; \b var \b0 Done: Boolean); \b virtual\b0 ;
\par     \b procedure \b0 DoDraw; \b virtual\b0 ;
\par     \b procedure \b0 DoMove(MoveCount: Integer); \b virtual\b0 ;
\par     \b function \b0 GetBoundsRect: TRect; \b virtual\b0 ;
\par     \b function \b0 TestCollision(Sprite: TSprite): Boolean; \b virtual\b0 ;
\par   \b public
\par     constructor \b0 Create(AParent: TSprite); \b virtual\b0 ;
\par     \b destructor \b0 Destroy; \b override\b0 ;
\par     \b procedure \b0 Clear;
\par     \b function \b0 Collision: Integer;
\par     \b procedure \b0 Dead;
\par     \b procedure \b0 Move(MoveCount: Integer);
\par     \b function \b0 GetSpriteAt(X, Y: Integer): TSprite;
\par     \b property \b0 BoundsRect: TRect \b read \b0 GetBoundsRect;
\par     \b property \b0 ClientRect: TRect \b read \b0 GetClientRect;
\par     \b property \b0 Collisioned: Boolean \b read \b0 FCollisioned \b write \b0 FCollisioned;
\par     \b property \b0 Count: Integer \b read \b0 GetCount;
\par     \b property \b0 Engine: TSpriteEngine \b read \b0 FEngine;
\par     \b property \b0 Items[\b Index\b0 : Integer]: TSprite \b read \b0 GetItem; \b default\b0 ;
\par     \b property \b0 Moved: Boolean \b read \b0 FMoved \b write \b0 FMoved;
\par     \b property \b0 Parent: TSprite \b read \b0 FParent;
\par     \b property \b0 Visible: Boolean \b read \b0 FVisible \b write \b0 FVisible;
\par     \b property \b0 Width: Integer \b read \b0 FWidth \b write \b0 FWidth;
\par     \b property \b0 WorldX: Single \b read \b0 GetWorldX;
\par     \b property \b0 WorldY: Single \b read \b0 GetWorldY;
\par     \b property \b0 Height: Integer \b read \b0 FHeight \b write \b0 FHeight;
\par     \b property \b0 X: Single \b read \b0 FX \b write \b0 FX;
\par     \b property \b0 Y: Single \b read \b0 FY \b write \b0 FY;
\par     \b property \b0 Z: Integer \b read \b0 FZ \b write \b0 SetZ;
\par   \b end\b0 ;
\par 
\par   \cf0\i (* TSpriteEngine *)
\par 
\par   \i0\cf1 TSpriteEngine = \b class\b0 (TSprite)
\par   \b private
\par     \b0 FAllCount: Integer;
\par     FCollisionCount: Integer;
\par     FCollisionDone: Boolean;
\par     FCollisionRect: TRect;
\par     FCollisionSprite: TSprite;
\par     FDeadList: TList;
\par     FDrawCount: Integer;
\par     FSurfaceRect: TRect;
\par     \b procedure \b0 SetSurface(Value: TRect);
\par   \b public
\par     constructor \b0 Create(AParent: TSprite); \b override\b0 ;
\par     \b destructor \b0 Destroy; \b override\b0 ;
\par     \b procedure \b0 Dead;
\par     \b procedure \b0 Draw;
\par     \b property \b0 AllCount: Integer \b read \b0 FAllCount;
\par     \b property \b0 DrawCount: Integer \b read \b0 FDrawCount;
\par     \b property \b0 SurfaceRect: TRect \b read \b0 FSurfaceRect \b write \b0 SetSurface;
\par   \b end\b0 ;
\par 
\par   \cf0\i \{  TBackgroundSprite  \}
\par 
\par   \i0\cf1 TBackgroundSprite = \b class\b0 (TSprite)
\par   \b private
\par     \b0 FImage: TPicture;
\par     FCollisionMap: Pointer;
\par     FMap: Pointer;
\par     FMapExtra: Pointer;
\par     FMapWidth: Integer;
\par     FMapHeight: Integer;
\par     FTile: Boolean;
\par     \b function \b0 GetCollisionMapItem(X, Y: Integer): Boolean;
\par     \b function \b0 GetChip(X, Y: Integer): Integer;
\par     \b procedure \b0 SetChip(X, Y: Integer; Value: Integer);
\par     \b function \b0 GetExtra(X, Y: Integer): Integer;
\par     \b procedure \b0 SetExtra(X, Y: Integer; Value: Integer);
\par     \b procedure \b0 SetCollisionMapItem(X, Y: Integer; Value: Boolean);
\par     \b procedure \b0 SetMapHeight(Value: Integer);
\par     \b procedure \b0 SetMapWidth(Value: Integer);
\par   \b protected
\par     procedure \b0 DoDraw; \b override\b0 ;
\par     \b function \b0 GetBoundsRect: TRect; \b override\b0 ;
\par     \b function \b0 TestCollision(Sprite: TSprite): Boolean; \b override\b0 ;
\par   \b public
\par     constructor \b0 Create(AParent: TSprite); \b override\b0 ;
\par     \b destructor \b0 Destroy; \b override\b0 ;
\par     \b procedure \b0 SetMapSize(AMapWidth, AMapHeight: Integer);
\par     \b property \b0 Chips[X, Y: Integer]: Integer \b read \b0 GetChip \b write \b0 SetChip;
\par     \b property \b0 ChipsExtra[X, Y: Integer]: Integer \b read \b0 GetExtra \b write \b0 SetExtra;
\par     \b property \b0 CollisionMap[X, Y: Integer]: Boolean \b read \b0 GetCollisionMapItem \b write \b0 SetCollisionMapItem;
\par     \b property \b0 Image: TPicture \b read \b0 FImage \b write \b0 FImage;
\par     \b property \b0 MapHeight: Integer \b read \b0 FMapHeight \b write \b0 SetMapHeight;
\par     \b property \b0 MapWidth: Integer \b read \b0 FMapWidth \b write \b0 SetMapWidth;
\par     \b property \b0 Tile: Boolean \b read \b0 FTile \b write \b0 FTile;
\par   \b end\b0 ;
\par 
\par   \cf0\i \{  TImageSprite  \}
\par 
\par   \i0\cf1 TImageSprite = \b class\b0 (TSprite)
\par   \b private
\par     \b0 FAnimCount: Integer;
\par     FAnimLooped: Boolean;
\par     FAnimPos: Double;
\par     FAnimSpeed: Double;
\par     FAnimStart: Integer;
\par     FAnimReverse: Boolean;
\par     FImage: TPicture;
\par     FPixelCheck: Boolean;
\par     FTile: Boolean;
\par     FTransparent: Boolean;
\par     FAlpha: Byte;
\par     FAngle: Single;
\par     FScale: TD3DXVector2;
\par     FCenter: TD3DXVector2;
\par     FShadow: Boolean;
\par     FShadowX: Single;
\par     FShadowY: Single;
\par     FShadowAlpha: Byte;
\par     FShadowScale: TD3DXVector2;
\par     \b function \b0 GetDrawImageIndex: Integer;
\par     \b function \b0 GetDrawRect: TRect;
\par   \b protected
\par     procedure \b0 DoDraw; \b override\b0 ;
\par     \b procedure \b0 DoMove(MoveCount: Integer); \b override\b0 ;
\par     \b function \b0 GetBoundsRect: TRect; \b override\b0 ;
\par     \b function \b0 TestCollision(Sprite: TSprite): Boolean; \b override\b0 ;
\par   \b public
\par     constructor \b0 Create(AParent: TSprite); \b override\b0 ;
\par     \b property \b0 AnimCount: Integer \b read \b0 FAnimCount \b write \b0 FAnimCount;
\par     \b property \b0 AnimLooped: Boolean \b read \b0 FAnimLooped \b write \b0 FAnimLooped;
\par     \b property \b0 AnimPos: Double \b read \b0 FAnimPos \b write \b0 FAnimPos;
\par     \b property \b0 AnimSpeed: Double \b read \b0 FAnimSpeed \b write \b0 FAnimSpeed;
\par     \b property \b0 AnimStart: Integer \b read \b0 FAnimStart \b write \b0 FAnimStart;
\par     \b property \b0 AnimReverse: Boolean \b read \b0 FAnimReverse \b write \b0 FAnimReverse;
\par     \b property \b0 PixelCheck: Boolean \b read \b0 FPixelCheck \b write \b0 FPixelCheck;
\par     \b property \b0 Image: TPicture \b read \b0 FImage \b write \b0 FImage;
\par     \b property \b0 Tile: Boolean \b read \b0 FTile \b write \b0 FTile;
\par     \b property \b0 Alpha: Byte \b read \b0 FAlpha \b write \b0 FAlpha;
\par     \b property \b0 Scale: TD3DXVector2 \b read \b0 FScale \b write \b0 FScale;
\par     \b property \b0 Angle: Single \b read \b0 FAngle \b write \b0 FAngle;
\par     \b property \b0 Center: TD3DXVector2 \b read \b0 FCenter \b write \b0 FCenter;
\par     \b property \b0 Shadow: Boolean \b read \b0 FShadow \b write \b0 FShadow;
\par     \b property \b0 ShadowX: Single \b read \b0 FShadowX \b write \b0 FShadowX;
\par     \b property \b0 ShadowY: Single \b read \b0 FShadowY \b write \b0 FShadowY;
\par     \b property \b0 ShadowAlpha: Byte \b read \b0 FShadowAlpha \b write \b0 FShadowAlpha;
\par     \b property \b0 ShadowScale: TD3DXVector2 \b read \b0 FShadowScale \b write \b0 FShadowScale;
\par   \b end\b0 ;
\par 
\par \b implementation
\par 
\par uses
\par   \b0 brForms, brUtils;
\par 
\par \b function \b0 Mod2(i, i2: Integer): Integer;
\par \b begin
\par   \b0 Result := i \b mod \b0 i2;
\par   \b if \b0 Result < \cf0 0 \cf1\b then
\par     \b0 Result := i2 + Result;
\par \b end\b0 ;
\par 
\par \b function \b0 Mod2f(i: Double; i2: Integer): Double;
\par \b begin
\par   if \b0 i2 = \cf0 0 \cf1\b then
\par     \b0 Result := i
\par   \b else
\par   begin
\par     \b0 Result := i - Trunc(i / i2) * i2;
\par     \b if \b0 Result < \cf0 0 \cf1\b then
\par       \b0 Result := i2 + Result;
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par   \cf0\i (* TSprite *)
\par 
\par \i0\cf1\b constructor \b0 TSprite.Create(AParent: TSprite);
\par \b begin
\par   inherited \b0 Create;
\par   FParent := AParent;
\par   \b if \b0 FParent <> \b nil then
\par   begin
\par     \b0 FParent.Add(Self);
\par     \b if \b0 FParent \b is \b0 TSpriteEngine \b then
\par       \b0 FEngine := TSpriteEngine(FParent)
\par     \b else
\par       \b0 FEngine := FParent.Engine;
\par     Inc(FEngine.FAllCount);
\par   \b end\b0 ;
\par 
\par   FCollisioned := True;
\par   FMoved := True;
\par   FVisible := True;
\par \b end\b0 ;
\par 
\par \b destructor \b0 TSprite.Destroy;
\par \b begin
\par   \b0 Clear;
\par   \b if \b0 FParent <> \b nil then
\par   begin
\par     \b0 Dec(FEngine.FAllCount);
\par     FParent.Remove(Self);
\par     FEngine.FDeadList.Remove(Self);
\par   \b end\b0 ;
\par   FList.Free;
\par   FDrawList.Free;
\par   \b inherited \b0 Destroy;
\par \b end\b0 ;
\par 
\par \b procedure \b0 TSprite.Add(Sprite: TSprite);
\par \b begin
\par   if \b0 FList = \b nil then
\par   begin
\par     \b0 FList := TList.Create;
\par     FDrawList := TList.Create;
\par   \b end\b0 ;
\par   FList.Add(Sprite);
\par   AddDrawList(Sprite);
\par \b end\b0 ;
\par 
\par \b procedure \b0 TSprite.Remove(Sprite: TSprite);
\par \b begin
\par   \b0 FList.Remove(Sprite);
\par   FDrawList.Remove(Sprite);
\par   \b if \b0 FList.Count = \cf0 0 \cf1\b then
\par   begin
\par     \b0 FList.Free;
\par     FList := \b nil\b0 ;
\par     FDrawList.Free;
\par     FDrawList := \b nil\b0 ;
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \b procedure \b0 TSprite.AddDrawList(Sprite: TSprite);
\par \b var
\par   \b0 L, H, I, C: Integer;
\par \b begin
\par   \b0 L := \cf0 0\cf1 ;
\par   H := FDrawList.Count - \cf0 1\cf1 ;
\par   \b while \b0 L <= H \b do
\par   begin
\par     \b0 I := (L + H) \b div \b0\cf0 2\cf1 ;
\par     C := TSprite(FDrawList[I]).Z - Sprite.Z;
\par     \b if \b0 C < \cf0 0 \cf1\b then \b0 L := I + \cf0 1 \cf1\b else
\par       \b0 H := I - \cf0 1\cf1 ;
\par   \b end\b0 ;
\par   FDrawList.Insert(L, Sprite);
\par \b end\b0 ;
\par 
\par \b procedure \b0 TSprite.Clear;
\par \b begin
\par   while \b0 Count > \cf0 0 \cf1\b do
\par     \b0 Items[Count - \cf0 1\cf1 ].Free;
\par \b end\b0 ;
\par 
\par \b function \b0 TSprite.Collision: Integer;
\par \b var
\par   \b0 i: Integer;
\par \b begin
\par   \b0 Result := \cf0 0\cf1 ;
\par   \b if \b0 (FEngine <> \b nil\b0 ) \b and \b0 (\b not \b0 FDeaded) \b and \b0 (Collisioned) \b then
\par   begin
\par     with \b0 FEngine \b do
\par     begin
\par       \b0 FCollisionCount := \cf0 0\cf1 ;
\par       FCollisionDone := False;
\par       FCollisionRect := Self.BoundsRect;
\par       FCollisionSprite := Self;
\par 
\par       \b for \b0 i := \cf0 0 \cf1\b to \b0 Count - \cf0 1 \cf1\b do
\par         \b0 Items[i].Collision2;
\par 
\par       Result := FCollisionCount;
\par     \b end\b0 ;
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \b procedure \b0 TSprite.Collision2;
\par \b var
\par   \b0 i: Integer;
\par \b begin
\par   if \b0 Collisioned \b then
\par   begin
\par     if \b0 (Self <> FEngine.FCollisionSprite) \b and \b0 OverlapRect(BoundsRect, FEngine.FCollisionRect) \b and
\par       \b0 FEngine.FCollisionSprite.TestCollision(Self) \b and \b0 TestCollision(FEngine.FCollisionSprite) \b then
\par     begin
\par       \b0 Inc(FEngine.FCollisionCount);
\par       FEngine.FCollisionSprite.DoCollision(Self, FEngine.FCollisionDone);
\par       \b if \b0 (\b not \b0 FEngine.FCollisionSprite.Collisioned) \b or \b0 (FEngine.FCollisionSprite.FDeaded) \b then
\par       begin
\par         \b0 FEngine.FCollisionDone := True;
\par       \b end\b0 ;
\par     \b end\b0 ;
\par     \b if \b0 FEngine.FCollisionDone \b then \b0 Exit;
\par     \b for \b0 i := \cf0 0 \cf1\b to \b0 Count - \cf0 1 \cf1\b do
\par       \b0 Items[i].Collision2;
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \b procedure \b0 TSprite.Dead;
\par \b begin
\par   if \b0 (FEngine <> \b nil\b0 ) \b and \b0 (\b not \b0 FDeaded) \b then
\par   begin
\par     \b0 FDeaded := True;
\par     FEngine.FDeadList.Add(Self);
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \b procedure \b0 TSprite.DoMove;
\par \b begin
\par 
\par end\b0 ;
\par 
\par \b procedure \b0 TSprite.DoDraw;
\par \b begin
\par 
\par end\b0 ;
\par 
\par \b procedure \b0 TSprite.DoCollision(Sprite: TSprite; \b var \b0 Done: Boolean);
\par \b begin
\par 
\par end\b0 ;
\par 
\par \b function \b0 TSprite.TestCollision(Sprite: TSprite): Boolean;
\par \b begin
\par   \b0 Result := True;
\par \b end\b0 ;
\par 
\par \b procedure \b0 TSprite.Move(MoveCount: Integer);
\par \b var
\par   \b0 I: Integer;
\par \b begin
\par   if \b0 FMoved \b then
\par   begin
\par     \b0 DoMove(MoveCount);
\par     \b for \b0 I := \cf0 0 \cf1\b to \b0 Count - \cf0 1 \cf1\b do
\par     begin
\par       \b0 Items[I].Move(MoveCount);
\par     \b end\b0 ;
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \b procedure \b0 TSprite.Draw;
\par \b var
\par   \b0 i: Integer;
\par \b begin
\par   if \b0 FVisible \b then
\par   begin
\par     if \b0 FEngine <> \b nil then
\par     begin
\par       if \b0 OverlapRect(FEngine.FSurfaceRect, BoundsRect) \b then
\par       begin
\par         \b0 DoDraw;
\par         Inc(FEngine.FDrawCount);
\par       \b end\b0 ;
\par     \b end\b0 ;
\par 
\par     \b if \b0 FDrawList <> \b nil then
\par     begin
\par       for \b0 i := \cf0 0 \cf1\b to \b0 FDrawList.Count - \cf0 1 \cf1\b do
\par         \b0 TSprite(FDrawList[i]).Draw;
\par     \b end\b0 ;
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \b function \b0 TSprite.GetSpriteAt(X, Y: Integer): TSprite;
\par 
\par   \b procedure \b0 Collision_GetSpriteAt(X, Y: Double; Sprite: TSprite);
\par   \b var
\par     \b0 i: Integer;
\par     X2, Y2: Double;
\par   \b begin
\par     if \b0 Sprite.Visible \b and \b0 PointInRect(Point(Round(X), Round(Y)), Bounds(Round(Sprite.X), Round(Sprite.Y), Sprite.Width, Sprite.Width)) \b then
\par     begin
\par       if \b0 (Result = \b nil\b0 ) \b or \b0 (Sprite.Z > Result.Z) \b then
\par         \b0 Result := Sprite;
\par     \b end\b0 ;
\par 
\par     X2 := X - Sprite.X;
\par     Y2 := Y - Sprite.Y;
\par     \b for \b0 i := \cf0 0 \cf1\b to \b0 Sprite.Count - \cf0 1 \cf1\b do
\par       \b0 Collision_GetSpriteAt(X2, Y2, Sprite.Items[i]);
\par   \b end\b0 ;
\par 
\par \b var
\par   \b0 i: Integer;
\par   X2, Y2: Double;
\par \b begin
\par   \b0 Result := \b nil\b0 ;
\par 
\par   X2 := X - Self.X;
\par   Y2 := Y - Self.Y;
\par   \b for \b0 i := \cf0 0 \cf1\b to \b0 Count - \cf0 1 \cf1\b do
\par     \b0 Collision_GetSpriteAt(X2, Y2, Items[i]);
\par \b end\b0 ;
\par 
\par \b function \b0 TSprite.GetBoundsRect: TRect;
\par \b begin
\par   \b0 Result := Bounds(Trunc(WorldX), Trunc(WorldY), Width, Height);
\par \b end\b0 ;
\par 
\par \b function \b0 TSprite.GetClientRect: TRect;
\par \b begin
\par   \b0 Result := Bounds(\cf0 0\cf1 , \cf0 0\cf1 , Width, Height);
\par \b end\b0 ;
\par 
\par \b function \b0 TSprite.GetCount: Integer;
\par \b begin
\par   if \b0 FList <> \b nil then
\par     \b0 Result := FList.Count
\par   \b else
\par     \b0 Result := \cf0 0\cf1 ;
\par \b end\b0 ;
\par 
\par \b function \b0 TSprite.GetItem(Index: Integer): TSprite;
\par \b begin
\par   if \b0 FList <> \b nil then
\par     \b0 Result := FList[Index]
\par   \b else
\par     raise \b0 EError.Create(\cf0 'function TSprite.GetItem(Index: Integer): TSprite'\cf1 );
\par \b end\b0 ;
\par 
\par \b function \b0 TSprite.GetWorldX: Single;
\par \b begin
\par   if \b0 Parent <> \b nil then
\par     \b0 Result := Parent.WorldX + FX
\par   \b else
\par     \b0 Result := FX;
\par \b end\b0 ;
\par 
\par \b function \b0 TSprite.GetWorldY: Single;
\par \b begin
\par   if \b0 Parent <> \b nil then
\par     \b0 Result := Parent.WorldY + FY
\par   \b else
\par     \b0 Result := FY;
\par \b end\b0 ;
\par 
\par \b procedure \b0 TSprite.SetZ(Value: Integer);
\par \b begin
\par   if \b0 FZ <> Value \b then
\par   begin
\par     \b0 FZ := Value;
\par     \b if \b0 Parent <> \b nil then
\par     begin
\par       \b0 Parent.FDrawList.Remove(Self);
\par       Parent.AddDrawList(Self);
\par     \b end\b0 ;
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par   \cf0\i (* TSpriteEngine *)
\par 
\par \i0\cf1\b constructor \b0 TSpriteEngine.Create(AParent: TSprite);
\par \b begin
\par   inherited \b0 Create(AParent);
\par   FDeadList := TList.Create;
\par \b end\b0 ;
\par 
\par \b destructor \b0 TSpriteEngine.Destroy;
\par \b begin
\par   \b0 FDeadList.Free;
\par   \b inherited \b0 Destroy;
\par \b end\b0 ;
\par 
\par \b procedure \b0 TSpriteEngine.Dead;
\par \b begin
\par   while \b0 FDeadList.Count > \cf0 0 \cf1\b do
\par     \b0 TSprite(FDeadList[FDeadList.Count - \cf0 1\cf1 ]).Free;
\par \b end\b0 ;
\par 
\par \b procedure \b0 TSpriteEngine.Draw;
\par \b begin
\par   \b0 FDrawCount := \cf0 0\cf1 ;
\par   \b inherited \b0 Draw;
\par \b end\b0 ;
\par 
\par \b procedure \b0 TSpriteEngine.SetSurface;
\par \b begin
\par   \b0 FSurfaceRect := Value;
\par   Width := FSurfaceRect.Right - FSurfaceRect.Left;
\par   Height := FSurfaceRect.Bottom - FSurfaceRect.Top;
\par \b end\b0 ;
\par 
\par \cf0\i \{  TBackgroundSprite  \}
\par 
\par \i0\cf1\b constructor \b0 TBackgroundSprite.Create(AParent: TSprite);
\par \b begin
\par   inherited \b0 Create(AParent);
\par   Collisioned := False;
\par \b end\b0 ;
\par 
\par \b destructor \b0 TBackgroundSprite.Destroy;
\par \b begin
\par   \b0 SetMapSize(\cf0 0\cf1 , \cf0 0\cf1 );
\par   \b inherited \b0 Destroy;
\par \b end\b0 ;
\par 
\par \b procedure \b0 TBackgroundSprite.DoDraw;
\par \b var
\par   \b0 _x, _y, cx, cy, cx2, cy2, c, ChipWidth, ChipHeight: Integer;
\par   StartX, StartY, EndX, EndY, StartX_, StartY_, OfsX, OfsY, dWidth, dHeight: Integer;
\par   r: TRect;
\par \b begin
\par   if \b0 Image = \b nil then \b0 Exit;
\par 
\par   \b if \b0 (FMapWidth <= \cf0 0\cf1 ) \b or \b0 (FMapHeight <= \cf0 0\cf1 ) \b then \b0 Exit;
\par 
\par   r := Rect(\cf0 0\cf1 , \cf0 0\cf1 , Image.Width, Image.Height);
\par   ChipWidth := r.Right - r.Left;
\par   ChipHeight := r.Bottom - r.Top;
\par 
\par   dWidth := (FEngine.SurfaceRect.Right + ChipWidth) \b div \b0 ChipWidth + \cf0 1\cf1 ;
\par   dHeight := (FEngine.SurfaceRect.Bottom + ChipHeight) \b div \b0 ChipHeight + \cf0 1\cf1 ;
\par 
\par   _x := Trunc(WorldX);
\par   _y := Trunc(WorldY);
\par 
\par   OfsX := _x \b mod \b0 ChipWidth;
\par   OfsY := _y \b mod \b0 ChipHeight;
\par 
\par   StartX := _x \b div \b0 ChipWidth;
\par   StartX_ := \cf0 0\cf1 ;
\par 
\par   \b if \b0 StartX < \cf0 0 \cf1\b then
\par   begin
\par     \b0 StartX_ := -StartX;
\par     StartX := \cf0 0\cf1 ;
\par   \b end\b0 ;
\par 
\par   StartY := _y \b div \b0 ChipHeight;
\par   StartY_ := \cf0 0\cf1 ;
\par 
\par   \b if \b0 StartY < \cf0 0 \cf1\b then
\par   begin
\par     \b0 StartY_ := -StartY;
\par     StartY := \cf0 0\cf1 ;
\par   \b end\b0 ;
\par 
\par   EndX := Min(StartX + FMapWidth - StartX_, dWidth);
\par   EndY := Min(StartY + FMapHeight - StartY_, dHeight);
\par 
\par   \b if \b0 FTile \b then
\par   begin
\par     for \b0 cy := -\cf0 1 \cf1\b to \b0 dHeight \b do
\par     begin
\par       \b0 cy2 := Mod2((cy - StartY + StartY_), FMapHeight);
\par       \b for \b0 cx := -\cf0 1 \cf1\b to \b0 dWidth \b do
\par       begin
\par         \b0 cx2 := Mod2((cx - StartX + StartX_), FMapWidth);
\par         c := Chips[cx2, cy2];
\par         \b if \b0 c >= \cf0 0 \cf1\b then
\par           \b0 Canvas.DrawAlpha(cx * ChipWidth + OfsX, cy * ChipHeight + OfsY, Image, c, \cf0 255\cf1 );
\par       \b end\b0 ;
\par     \b end\b0 ;
\par   \b end else
\par   begin
\par     for \b0 cy := StartY \b to \b0 EndY - \cf0 1 \cf1\b do
\par       for \b0 cx := StartX \b to \b0 EndX - \cf0 1 \cf1\b do
\par       begin
\par         \b0 c := Chips[cx - StartX + StartX_, cy - StartY + StartY_];
\par         \b if \b0 c >= \cf0 0 \cf1\b then
\par           \b0 Canvas.DrawAlpha(cx * ChipWidth + OfsX, cy * ChipHeight + OfsY, Image, c, \cf0 255\cf1 );
\par       \b end\b0 ;
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \b function \b0 TBackgroundSprite.TestCollision(Sprite: TSprite): Boolean;
\par \b var
\par   \b0 b, b1, b2: TRect;
\par   cx, cy, ChipWidth, ChipHeight: Integer;
\par   r, k: TRect;
\par \b begin
\par   \b0 Result := True;
\par   \b if \b0 Image = \b nil then \b0 Exit;
\par   \b if \b0 (FMapWidth <= \cf0 0\cf1 ) \b or \b0 (FMapHeight <= \cf0 0\cf1 ) \b then \b0 Exit;
\par 
\par   r := Rect(\cf0 0\cf1 , \cf0 0\cf1 , Image.Width, Image.Height);
\par   ChipWidth := r.Right - r.Left;
\par   ChipHeight := r.Bottom - r.Top;
\par 
\par   b1 := Sprite.BoundsRect;
\par   b2 := BoundsRect;
\par 
\par   IntersectRect(b, b1, b2);
\par 
\par   OffsetRect(b, -Trunc(WorldX), -Trunc(WorldY));
\par   OffsetRect(b1, -Trunc(WorldX), -Trunc(WorldY));
\par 
\par   \b for \b0 cy := (b.Top - ChipHeight + \cf0 1\cf1 ) \b div \b0 ChipHeight \b to \b0 b.Bottom \b div \b0 ChipHeight \b do
\par     for \b0 cx := (b.Left - ChipWidth + \cf0 1\cf1 ) \b div \b0 ChipWidth \b to \b0 b.Right \b div \b0 ChipWidth \b do
\par       if \b0 CollisionMap[Mod2(cx, MapWidth), Mod2(cy, MapHeight)] \b then
\par       begin
\par         if \b0 OverlapRect(Bounds(cx * ChipWidth, cy * ChipHeight, ChipWidth, ChipHeight), b1) \b then \b0 Exit;
\par       \b end\b0 ;
\par 
\par   Result := False;
\par \b end\b0 ;
\par 
\par \b function \b0 TBackgroundSprite.GetChip(X, Y: Integer): Integer;
\par \b begin
\par   if \b0 (X >= \cf0 0\cf1 ) \b and \b0 (X < FMapWidth) \b and \b0 (Y >= \cf0 0\cf1 ) \b and \b0 (Y < FMapHeight) \b then
\par     \b0 Result := PInteger(Integer(FMap) + (Y * FMapWidth + X) * SizeOf(Integer))^
\par   \b else
\par     \b0 Result := -\cf0 1\cf1 ;
\par \b end\b0 ;
\par 
\par \b function \b0 TBackgroundSprite.GetExtra(X, Y: Integer): Integer;
\par \b begin
\par   if \b0 (X >= \cf0 0\cf1 ) \b and \b0 (X < FMapWidth) \b and \b0 (Y >= \cf0 0\cf1 ) \b and \b0 (Y < FMapHeight) \b then
\par     \b0 Result := PInteger(Integer(FMapExtra) + (Y * FMapWidth + X) * SizeOf(Integer))^
\par   \b else
\par     \b0 Result := -\cf0 1\cf1 ;
\par \b end\b0 ;
\par 
\par \b type
\par   \b0 PBoolean = ^Boolean;
\par 
\par \b function \b0 TBackgroundSprite.GetCollisionMapItem(X, Y: Integer): Boolean;
\par \b begin
\par   if \b0 (X >= \cf0 0\cf1 ) \b and \b0 (X < FMapWidth) \b and \b0 (Y >= \cf0 0\cf1 ) \b and \b0 (Y < FMapHeight) \b then
\par     \b0 Result := PBoolean(Integer(FCollisionMap) + (Y * FMapWidth + X) * SizeOf(Boolean))^
\par   \b else
\par     \b0 Result := False;
\par \b end\b0 ;
\par 
\par \b function \b0 TBackgroundSprite.GetBoundsRect: TRect;
\par \b begin
\par   if \b0 FTile \b then
\par     \b0 Result := FEngine.SurfaceRect
\par   \b else
\par   begin
\par     if \b0 Image <> \b nil then
\par       \b0 Result := Bounds(Trunc(WorldX), Trunc(WorldY),
\par         Image.Width * FMapWidth, Image.Height * FMapHeight)
\par     \b else
\par       \b0 Result := Rect(\cf0 0\cf1 , \cf0 0\cf1 , \cf0 0\cf1 , \cf0 0\cf1 );
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \b procedure \b0 TBackgroundSprite.SetChip(X, Y: Integer; Value: Integer);
\par \b begin
\par   if \b0 (X >= \cf0 0\cf1 ) \b and \b0 (X < FMapWidth) \b and \b0 (Y >= \cf0 0\cf1 ) \b and \b0 (Y < FMapHeight) \b then
\par     \b0 PInteger(Integer(FMap) + (Y * FMapWidth + X) * SizeOf(Integer))^ := Value;
\par \b end\b0 ;
\par 
\par \b procedure \b0 TBackgroundSprite.SetExtra(X, Y: Integer; Value: Integer);
\par \b begin
\par   if \b0 (X >= \cf0 0\cf1 ) \b and \b0 (X < FMapWidth) \b and \b0 (Y >= \cf0 0\cf1 ) \b and \b0 (Y < FMapHeight) \b then
\par     \b0 PInteger(Integer(FMapExtra) + (Y * FMapWidth + X) * SizeOf(Integer))^ := Value;
\par \b end\b0 ;
\par 
\par \b procedure \b0 TBackgroundSprite.SetCollisionMapItem(X, Y: Integer; Value: Boolean);
\par \b begin
\par   if \b0 (X >= \cf0 0\cf1 ) \b and \b0 (X < FMapWidth) \b and \b0 (Y >= \cf0 0\cf1 ) \b and \b0 (Y < FMapHeight) \b then
\par     \b0 PBoolean(Integer(FCollisionMap) + (Y * FMapWidth + X) * SizeOf(Boolean))^ := Value;
\par \b end\b0 ;
\par 
\par \b procedure \b0 TBackgroundSprite.SetMapHeight(Value: Integer);
\par \b begin
\par   \b0 SetMapSize(FMapWidth, Value);
\par \b end\b0 ;
\par 
\par \b procedure \b0 TBackgroundSprite.SetMapWidth(Value: Integer);
\par \b begin
\par   \b0 SetMapSize(Value, FMapHeight);
\par \b end\b0 ;
\par 
\par \b procedure \b0 TBackgroundSprite.SetMapSize(AMapWidth, AMapHeight: Integer);
\par \b begin
\par   if \b0 (FMapWidth <> AMapWidth) \b or \b0 (FMapHeight <> AMapHeight) \b then
\par   begin
\par     if \b0 (AMapWidth <= \cf0 0\cf1 ) \b or \b0 (AMapHeight <= \cf0 0\cf1 ) \b then
\par     begin
\par       \b0 AMapWidth := \cf0 0\cf1 ;
\par       AMapHeight := \cf0 0\cf1 ;
\par     \b end\b0 ;
\par     FMapWidth := AMapWidth;
\par     FMapHeight := AMapHeight;
\par     ReAllocMem(FMap, FMapWidth * FMapHeight * SizeOf(Integer));
\par     FillChar(FMap^, FMapWidth * FMapHeight * SizeOf(Integer), \cf0 0\cf1 );
\par 
\par     ReAllocMem(FCollisionMap, FMapWidth * FMapHeight * SizeOf(Boolean));
\par     FillChar(FCollisionMap^, FMapWidth * FMapHeight * SizeOf(Boolean), \cf0 1\cf1 );
\par 
\par     ReAllocMem(FMapExtra, FMapWidth * FMapHeight * SizeOf(Integer));
\par     FillChar(FMapExtra^, FMapWidth * FMapHeight * SizeOf(Integer), \cf0 0\cf1 );
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \cf0\i \{  TImageSprite  \}
\par 
\par \i0\cf1\b constructor \b0 TImageSprite.Create(AParent: TSprite);
\par \b begin
\par   inherited \b0 Create(AParent);
\par   FTransparent := True;
\par   FAlpha := \cf0 255\cf1 ;
\par   FAngle := \cf0 0.0\cf1 ;
\par   FScale := D3DXVector2(\cf0 1.0\cf1 , \cf0 1.0\cf1 );
\par   FShadow := False;
\par   FShadowAlpha := \cf0 70\cf1 ;
\par   FShadowX := \cf0 30\cf1 ;
\par   FShadowY := \cf0 40\cf1 ;
\par   FShadowScale := D3DXVector2(\cf0 1.0\cf1 , \cf0 1.0\cf1 );
\par \b end\b0 ;
\par 
\par \b function \b0 TImageSprite.GetBoundsRect: TRect;
\par \b var
\par   \b0 dx, dy: Integer;
\par \b begin
\par   \b0 dx := Trunc(WorldX);
\par   dy := Trunc(WorldY);
\par   \b if \b0 FTile \b then
\par   begin
\par     \b0 dx := Mod2(dx, FEngine.SurfaceRect.Right + Width);
\par     dy := Mod2(dy, FEngine.SurfaceRect.Bottom + Height);
\par 
\par     \b if \b0 dx > FEngine.SurfaceRect.Right \b then
\par       \b0 dx := (dx - FEngine.SurfaceRect.Right) - Width;
\par 
\par     \b if \b0 dy > FEngine.SurfaceRect.Bottom \b then
\par       \b0 dy := (dy - FEngine.SurfaceRect.Bottom) - Height;
\par   \b end\b0 ;
\par 
\par   Result := Bounds(dx, dy, Width, Height);
\par \b end\b0 ;
\par 
\par \b procedure \b0 TImageSprite.DoMove(MoveCount: Integer);
\par \b begin
\par   if \b0 FAnimReverse \b then
\par     \b0 FAnimPos := FAnimPos - FAnimSpeed * MoveCount
\par   \b else
\par     \b0 FAnimPos := FAnimPos + FAnimSpeed * MoveCount;
\par 
\par   \b if \b0 FAnimLooped \b then
\par   begin
\par     if \b0 FAnimCount > \cf0 0 \cf1\b then
\par       \b0 FAnimPos := Mod2f(FAnimPos, FAnimCount)
\par     \b else
\par       \b0 FAnimPos := \cf0 0\cf1 ;
\par   \b end else
\par   begin
\par     if \b0 FAnimPos >= FAnimCount \b then
\par     begin
\par       \b0 FAnimPos := FAnimCount - \cf0 1\cf1 ;
\par       FAnimSpeed := \cf0 0\cf1 ;
\par     \b end\b0 ;
\par     \b if \b0 FAnimPos < \cf0 0 \cf1\b then
\par     begin
\par       \b0 FAnimPos := \cf0 0\cf1 ;
\par       FAnimSpeed := \cf0 0\cf1 ;
\par     \b end\b0 ;
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \b function \b0 TImageSprite.GetDrawImageIndex: Integer;
\par \b begin
\par   \b0 Result := FAnimStart + Trunc(FAnimPos);
\par \b end\b0 ;
\par 
\par \b function \b0 TImageSprite.GetDrawRect: TRect;
\par \b begin
\par   \b0 Result := BoundsRect;
\par   OffsetRect(Result, (Width - Image.Width) \b div \b0\cf0 2\cf1 , (Height - Image.Height) \b div \b0\cf0 2\cf1 );
\par \b end\b0 ;
\par 
\par \b procedure \b0 TImageSprite.DoDraw;
\par \b var
\par   \b0 ImageIndex: Integer;
\par   r: TRect;
\par   Pos: TD3DXVector2;
\par \b begin
\par   \b0 ImageIndex := GetDrawImageIndex;
\par 
\par   r := GetDrawRect;
\par 
\par   \b if \b0 FShadow \b then
\par   begin
\par     \b0 Pos := D3DXVector2(r.Left + FShadowX, r.Top + FShadowY);
\par     Canvas.Sprite.Draw(Image.PatternTextures[ImageIndex].Image, \b nil\b0 , @FShadowScale, @Center, D3DXToRadian(Angle), @Pos, (ShadowAlpha \b shl \b0\cf0 24\cf1 ) + clBlack)
\par   \b end\b0 ;
\par 
\par   Pos := D3DXVector2(r.Left, r.Top);
\par   Canvas.Sprite.Draw(Image.PatternTextures[ImageIndex].Image, \b nil\b0 , @FScale, @Center, D3DXToRadian(Angle), @Pos, (Alpha \b shl \b0\cf0 24\cf1 ) + clWhite);
\par \b end\b0 ;
\par 
\par \b function \b0 ImageCollisionTest(suf1, suf2: IDirect3DTexture8; \b const \b0 rect1, rect2: TRect;
\par   x1, y1, x2, y2: Integer; DoPixelCheck: Boolean): Boolean;
\par 
\par   \b function \b0 ClipRect(\b var \b0 DestRect: TRect; \b const \b0 DestRect2: TRect): Boolean;
\par   \b begin
\par     with \b0 DestRect \b do
\par     begin
\par       \b0 Left := Max(Left, DestRect2.Left);
\par       Right := Min(Right, DestRect2.Right);
\par       Top := Max(Top, DestRect2.Top);
\par       Bottom := Min(Bottom, DestRect2.Bottom);
\par 
\par       Result := (Left < Right) \b and \b0 (Top < Bottom);
\par     \b end\b0 ;
\par   \b end\b0 ;
\par 
\par \b type
\par   \b0 PRGB = ^TRGB;
\par   TRGB = \b packed record
\par     \b0 R, G, B: Byte;
\par   \b end\b0 ;
\par \b var
\par   \b0 ddsd1, ddsd2: TD3DSurfaceDesc;
\par   r1, r2: TRect;
\par   tc1, tc2: DWORD;
\par   x, y, w, h: Integer;
\par   P1, P2: Pointer;
\par   LockedRect1: D3DLOCKED_RECT;
\par   LockedRect2: D3DLOCKED_RECT;
\par \b begin
\par   \b0 Result := True;
\par   r1 := rect1;
\par   \b with \b0 rect2 \b do \b0 r2 := Bounds(x2 - x1, y2 - y1, Right - Left, Bottom - Top);
\par 
\par   Result := OverlapRect(r1, r2);
\par 
\par  \cf0\i \{ if (suf1 = nil) or (suf2 = nil) then Exit;
\par 
\par   if DoPixelCheck and Result then
\par   begin
\par     \{  Get Overlapping rectangle  \}
\par   \{  with r1 do r1 := Bounds(Max(x2 - x1, 0), Max(y2 - y1, 0), Right - Left, Bottom - Top);
\par     with r2 do r2 := Bounds(Max(x1 - x2, 0), Max(y1 - y2, 0), Right - Left, Bottom - Top);
\par 
\par     ClipRect(r1, rect1);
\par     ClipRect(r2, rect2);
\par 
\par     w := Min(r1.Right - r1.Left, r2.Right - r2.Left);
\par     h := Min(r1.Bottom - r1.Top, r2.Bottom - r2.Top);
\par 
\par     ClipRect(r1, bounds(r1.Left, r1.Top, w, h));
\par     ClipRect(r2, bounds(r2.Left, r2.Top, w, h));
\par 
\par     \{  Pixel check !!!  \}
\par   \{  ddsd1.Size := SizeOf(ddsd1);
\par     if Succeeded(suf1.LockRect(LockedRect1, @r1, 0)) then
\par     begin
\par       try
\par         ddsd2.Size := SizeOf(ddsd2);
\par         if (suf1 = suf2) or Succeeded(suf2.LockRect(LockedRect2, @r2, 0)) then
\par         begin
\par           try
\par             if suf1 = suf2 then ddsd2 := ddsd1;
\par             if ddsd1.Format <> ddsd2.Format then Exit;
\par 
\par             \{  Get transparent color  \}
\par //            tc1 := ddsd1.ddckCKSrcBlt.dwColorSpaceLowValue;
\par //            tc2 := ddsd2.ddckCKSrcBlt.dwColorSpaceLowValue;
\par 
\par       \{      tc1 := clFuchsia;
\par             tc2 := clFuchsia;
\par 
\par             case ddsd1.Format of
\par               D3DFMT_R3G3B2: begin
\par                   for y := 0 to h - 1 do
\par                   begin
\par                     P1 := Pointer(Integer(ddsd1.lpSurface) + y * ddsd1.lPitch);
\par                     P2 := Pointer(Integer(ddsd2.lpSurface) + y * ddsd2.lPitch);
\par                     for x := 0 to w - 1 do
\par                     begin
\par                       if (PByte(P1)^ <> tc1) and (PByte(P2)^ <> tc2) then Exit;
\par                       Inc(PByte(P1));
\par                       Inc(PByte(P2));
\par                     end;
\par                   end;
\par                 end;
\par               D3DFMT_R5G6B5: begin
\par                   for y := 0 to h - 1 do
\par                   begin
\par                     P1 := Pointer(Integer(ddsd1.lpSurface) + y * ddsd1.lPitch);
\par                     P2 := Pointer(Integer(ddsd2.lpSurface) + y * ddsd2.lPitch);
\par                     for x := 0 to w - 1 do
\par                     begin
\par                       if (PWord(P1)^ <> tc1) and (PWord(P2)^ <> tc2) then Exit;
\par                       Inc(PWord(P1));
\par                       Inc(PWord(P2));
\par                     end;
\par                   end;
\par                 end;
\par               D3DFMT_X8R8G8B8: begin
\par                   for y := 0 to h - 1 do
\par                   begin
\par                     P1 := Pointer(Integer(ddsd1.lpSurface) + y * ddsd1.lPitch);
\par                     P2 := Pointer(Integer(ddsd2.lpSurface) + y * ddsd2.lPitch);
\par                     for x := 0 to w - 1 do
\par                     begin
\par                       if ((PRGB(P1)^.R shl 16) or (PRGB(P1)^.G shl 8) or PRGB(P1)^.B <> tc1) and
\par                         ((PRGB(P2)^.R shl 16) or (PRGB(P2)^.G shl 8) or PRGB(P2)^.B <> tc2) then Exit;
\par                       Inc(PRGB(P1));
\par                       Inc(PRGB(P2));
\par                     end;
\par                   end;
\par                 end;
\par               D3DFMT_A8R8G8B8: begin
\par                   for y := 0 to h - 1 do
\par                   begin
\par                     P1 := Pointer(Integer(ddsd1.lpSurface) + y * ddsd1.lPitch);
\par                     P2 := Pointer(Integer(ddsd2.lpSurface) + y * ddsd2.lPitch);
\par                     for x := 0 to w - 1 do
\par                     begin
\par                       if (PDWORD(P1)^ and $FFFFFF <> tc1) and (PDWORD(P2)^ and $FFFFFF <> tc2) then Exit;
\par                       Inc(PDWORD(P1));
\par                       Inc(PDWORD(P2));
\par                     end;
\par                   end;
\par                 end;
\par             end;
\par           finally
\par             if suf1 <> suf2 then suf2.UnLock;
\par           end;
\par         end;
\par       finally
\par         suf1.UnLock;
\par       end;
\par     end;
\par 
\par     Result := False;
\par   end;   \}
\par \i0\cf1\b end\b0 ;
\par 
\par \b function \b0 TImageSprite.TestCollision(Sprite: TSprite): Boolean;
\par \b var
\par   \b0 img1, img2: Integer;
\par   b1, b2: TRect;
\par \b begin
\par   if \b0 (Sprite \b is \b0 TImageSprite) \b and \b0 FPixelCheck \b then
\par   begin
\par     \b0 b1 := GetDrawRect;
\par     b2 := TImageSprite(Sprite).GetDrawRect;
\par 
\par     img1 := GetDrawImageIndex;
\par     img2 := TImageSprite(Sprite).GetDrawImageIndex;
\par 
\par     Result := ImageCollisionTest(Image.PatternTextures[img1].Image, TImageSprite(Sprite).Image.PatternTextures[img2].Image,
\par       Rect(\cf0 0\cf1 , \cf0 0\cf1 , Image.Width, Image.Height), Rect(\cf0 0\cf1 , \cf0 0\cf1 , TImageSprite(Sprite).Image.Width, TImageSprite(Sprite).Image.Height),
\par       b1.Left, b1.Top, b2.Left, b2.Top, True);
\par   \b end else
\par     \b0 Result := \b inherited \b0 TestCollision(Sprite);
\par \b end\b0 ;
\par 
\par \b initialization
\par   \b0 InitCosinTable;
\par   
\par \b end\b0 .
\par }