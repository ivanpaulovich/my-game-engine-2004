{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue128;\red0\green0\blue0;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title brUtils.rtf}}

\deflang1033\pard\plain\f0\fs20 \cf0\i (*******************************************************)
\par (*                                                     *)
\par (*       Engine Paulovich DirectX                      *)
\par (*       Win32-DirectX API Unit                        *)
\par (*                                                     *)
\par (*       Copyright (c) 2003-2004, Ivan Paulovich       *)
\par (*                                                     *)
\par (*       iskatrek@hotmail.com  uin#89160524            *)
\par (*                                                     *)
\par (*       Unit: brUtils                                 *)
\par (*                                                     *)
\par (*******************************************************)
\par 
\par \i0\cf1\b unit \b0 brUtils;
\par 
\par \b interface
\par 
\par uses
\par   \b0 Windows, SysUtils;
\par 
\par  \cf0\i (* Outras Funções *)
\par 
\par \i0\cf1\b function \b0 Max(Val1, Val2: Integer): Integer;
\par \b function \b0 Min(Val1, Val2: Integer): Integer;
\par 
\par \b procedure \b0 InitCosinTable;
\par \b function \b0 Cos256(i: Integer): Double;
\par \b function \b0 Sin256(i: Integer): Double;
\par 
\par \b function \b0 PointInRect(\b const \b0 Point: TPoint; \b const \b0 Rect: TRect): Boolean;
\par \b function \b0 RectInRect(\b const \b0 Rect1, Rect2: TRect): Boolean;
\par \b function \b0 OverlapRect(\b const \b0 Rect1, Rect2: TRect): Boolean;
\par 
\par \b function \b0 WideRect(ALeft, ATop, AWidth, AHeight: Integer): TRect;
\par 
\par \b function \b0 Show(hWnd: HWND; \b const \b0 Text, Caption: \b string\b0 ; Flags: UINT): Integer;
\par 
\par \b implementation
\par 
\par  \b0\cf0\i (* Outras Funções *)
\par 
\par \i0\cf1\b function \b0 Max(Val1, Val2: Integer): Integer;
\par \b begin
\par   if \b0 Val1 >= Val2 \b then \b0 Result := Val1 \b else \b0 Result := Val2;
\par \b end\b0 ;
\par 
\par \b function \b0 Min(Val1, Val2: Integer): Integer;
\par \b begin
\par   if \b0 Val1 <= Val2 \b then \b0 Result := Val1 \b else \b0 Result := Val2;
\par \b end\b0 ;
\par 
\par \b function \b0 PointInRect(\b const \b0 Point: TPoint; \b const \b0 Rect: TRect): Boolean;
\par \b begin
\par   \b0 Result := (Point.X >= Rect.Left) \b and
\par     \b0 (Point.X <= Rect.Right) \b and
\par     \b0 (Point.Y >= Rect.Top) \b and
\par     \b0 (Point.Y <= Rect.Bottom);
\par \b end\b0 ;
\par 
\par \b function \b0 RectInRect(\b const \b0 Rect1, Rect2: TRect): Boolean;
\par \b begin
\par   \b0 Result := (Rect1.Left >= Rect2.Left) \b and
\par     \b0 (Rect1.Right <= Rect2.Right) \b and
\par     \b0 (Rect1.Top >= Rect2.Top) \b and
\par     \b0 (Rect1.Bottom <= Rect2.Bottom);
\par \b end\b0 ;
\par 
\par \b function \b0 OverlapRect(\b const \b0 Rect1, Rect2: TRect): Boolean;
\par \b begin
\par   \b0 Result := (Rect1.Left < Rect2.Right) \b and
\par     \b0 (Rect1.Right > Rect2.Left) \b and
\par     \b0 (Rect1.Top < Rect2.Bottom) \b and
\par     \b0 (Rect1.Bottom > Rect2.Top);
\par \b end\b0 ;
\par 
\par \b function \b0 WideRect(ALeft, ATop, AWidth, AHeight: Integer): TRect;
\par \b begin
\par   with \b0 Result \b do
\par   begin
\par     \b0 Left := ALeft;
\par     Top := ATop;
\par     Right := ALeft + AWidth;
\par     Bottom := ATop + AHeight;
\par   \b end\b0 ;
\par \b end\b0 ;
\par 
\par \b function \b0 Show(hWnd: HWND; \b const \b0 Text, Caption: \b string\b0 ; Flags: UINT): Integer;
\par \b begin
\par   \b0 Result := MessageBox(hWnd, PChar(Text), PChar(Caption), Flags);
\par \b end\b0 ;
\par 
\par \b var
\par   \b0 CosinTable: \b array\b0 [\cf0 0\cf1 ..\cf0 255\cf1 ] \b of \b0 Double;
\par 
\par \b procedure \b0 InitCosinTable;
\par \b var
\par   \b0 i: Integer;
\par \b begin
\par   for \b0 i := \cf0 0 \cf1\b to \b0\cf0 255 \cf1\b do
\par     \b0 CosinTable[i] := Cos((i / \cf0 256\cf1 ) * \cf0 2 \cf1 * PI);
\par \b end\b0 ;
\par 
\par \b function \b0 Cos256(i: Integer): Double;
\par \b begin
\par   \b0 Result := CosinTable[i \b and \b0\cf0 255\cf1 ];
\par \b end\b0 ;
\par 
\par \b function \b0 Sin256(i: Integer): Double;
\par \b begin
\par   \b0 Result := CosinTable[(i + \cf0 192\cf1 ) \b and \b0\cf0 255\cf1 ];
\par \b end\b0 ;
\par 
\par \b end\b0 .
\par 
\par }